// Video Platform Database Schema
// Based on: docs/specs/references/data-models.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// 1. Authentication & User Management
// =====================================

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique @db.VarChar(255)
  passwordHash      String    @map("password_hash") @db.VarChar(255)
  name              String    @db.VarChar(100)
  displayName       String?   @map("display_name") @db.VarChar(100)
  bio               String?   @db.Text
  avatarUrl         String?   @map("avatar_url") @db.VarChar(500)
  isEmailVerified   Boolean   @default(false) @map("is_email_verified")
  isCreator         Boolean   @default(false) @map("is_creator")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  lastLoginAt       DateTime? @map("last_login_at") @db.Timestamptz

  // Relations
  sessions            UserSession[]
  emailVerifications  EmailVerification[]
  passwordResets      PasswordReset[]
  subscriptions       UserSubscription[]
  paymentMethods      PaymentMethod[]
  videos              Video[]
  videoLikes          VideoLike[]
  videoComments       VideoComment[]
  videoViews          VideoView[]
  watchHistory        WatchHistory[]
  sentTips            Tip[]                @relation("SentTips")
  receivedTips        Tip[]                @relation("ReceivedTips")
  earnings            Earning[]
  withdrawalMethods   WithdrawalMethod[]
  withdrawalRequests  WithdrawalRequest[]
  taxInfo             TaxInfo?
  playlists           Playlist[]
  followers           Follow[]             @relation("Following")
  following           Follow[]             @relation("Follower")
  notifications       Notification[]
  userStats           UserStats?
  channel             Channel?

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model UserSession {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  refreshTokenHash  String   @map("refresh_token_hash") @db.VarChar(255)
  deviceInfo        Json?    @map("device_info") @db.JsonB
  expiresAt         DateTime @map("expires_at") @db.Timestamptz
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  lastAccessedAt    DateTime @default(now()) @map("last_accessed_at") @db.Timestamptz
  isRevoked         Boolean  @default(false) @map("is_revoked")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([refreshTokenHash])
  @@map("user_sessions")
}

model EmailVerification {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  verificationCode String    @map("verification_code") @db.VarChar(64)
  expiresAt        DateTime  @map("expires_at") @db.Timestamptz
  verifiedAt       DateTime? @map("verified_at") @db.Timestamptz
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([verificationCode])
  @@map("email_verifications")
}

model PasswordReset {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  resetTokenHash  String    @map("reset_token_hash") @db.VarChar(255)
  expiresAt       DateTime  @map("expires_at") @db.Timestamptz
  usedAt          DateTime? @map("used_at") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([resetTokenHash])
  @@map("password_resets")
}

// =====================================
// 2. Subscription & Payment
// =====================================

model SubscriptionPlan {
  id              String   @id @db.VarChar(50)
  name            String   @db.VarChar(100)
  nameEn          String   @map("name_en") @db.VarChar(100)
  description     String?  @db.Text
  price           Int      // 円単位
  billingInterval String   @map("billing_interval") @db.VarChar(20) // 'month', 'year'
  paymentProvider String   @map("payment_provider") @db.VarChar(20) // 'stripe', 'ccbill', 'free'
  stripePriceId   String?  @map("stripe_price_id") @db.VarChar(100)
  ccbillFormId    String?  @map("ccbill_form_id") @db.VarChar(100)
  features        Json     @db.JsonB
  hasAdultAccess  Boolean  @default(false) @map("has_adult_access")
  isActive        Boolean  @default(true) @map("is_active")
  sortOrder       Int      @default(0) @map("sort_order")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  userSubscriptions UserSubscription[]

  @@index([stripePriceId])
  @@index([ccbillFormId])
  @@map("subscription_plans")
}

model UserSubscription {
  id                     String    @id @default(uuid()) @db.Uuid
  userId                 String    @map("user_id") @db.Uuid
  planId                 String    @map("plan_id") @db.VarChar(50)
  paymentProvider        String    @map("payment_provider") @db.VarChar(20) // 'stripe', 'ccbill', 'free'
  externalSubscriptionId String?   @map("external_subscription_id") @db.VarChar(255)
  externalCustomerId     String?   @map("external_customer_id") @db.VarChar(255)
  status                 String    @db.VarChar(20) // 'active', 'canceled', 'past_due', 'unpaid'
  currentPeriodStart     DateTime  @map("current_period_start") @db.Timestamptz
  currentPeriodEnd       DateTime  @map("current_period_end") @db.Timestamptz
  cancelAtPeriodEnd      Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt             DateTime? @map("canceled_at") @db.Timestamptz
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user         User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan         SubscriptionPlan             @relation(fields: [planId], references: [id])
  paymentHistory SubscriptionPaymentHistory[]

  @@unique([userId, planId, status])
  @@index([userId])
  @@index([status])
  @@index([externalSubscriptionId])
  @@map("user_subscriptions")
}

model SubscriptionPaymentHistory {
  id                   String    @id @default(uuid()) @db.Uuid
  userSubscriptionId   String    @map("user_subscription_id") @db.Uuid
  paymentProvider      String    @map("payment_provider") @db.VarChar(20)
  externalPaymentId    String?   @map("external_payment_id") @db.VarChar(255)
  amount               Int       // 円単位
  currency             String    @default("JPY") @db.VarChar(3)
  status               String    @db.VarChar(20) // 'succeeded', 'failed', 'pending', 'refunded'
  paymentMethodType    String?   @map("payment_method_type") @db.VarChar(50)
  failureReason        String?   @map("failure_reason") @db.Text
  paidAt               DateTime? @map("paid_at") @db.Timestamptz
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  userSubscription UserSubscription @relation(fields: [userSubscriptionId], references: [id], onDelete: Cascade)

  @@index([userSubscriptionId])
  @@index([status])
  @@index([externalPaymentId])
  @@map("subscription_payment_history")
}

model PaymentMethod {
  id                      String   @id @default(uuid()) @db.Uuid
  userId                  String   @map("user_id") @db.Uuid
  paymentProvider         String   @map("payment_provider") @db.VarChar(20)
  externalPaymentMethodId String   @map("external_payment_method_id") @db.VarChar(255)
  type                    String   @db.VarChar(50) // 'card', 'paypal', 'bank_transfer'
  cardBrand               String?  @map("card_brand") @db.VarChar(20) // 'visa', 'mastercard', 'amex', 'jcb'
  cardLast4               String?  @map("card_last4") @db.VarChar(4)
  cardExpMonth            Int?     @map("card_exp_month")
  cardExpYear             Int?     @map("card_exp_year")
  isDefault               Boolean  @default(false) @map("is_default")
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([externalPaymentMethodId])
  @@map("payment_methods")
}

// =====================================
// 3. Video Management
// =====================================

model VideoCategory {
  id          String   @id @db.VarChar(50)
  name        String   @db.VarChar(100)
  nameEn      String   @map("name_en") @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  videos Video[]

  @@map("video_categories")
}

model Video {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  title           String    @db.VarChar(200)
  description     String?   @db.Text
  categoryId      String?   @map("category_id") @db.VarChar(50)
  thumbnailUrl    String?   @map("thumbnail_url") @db.VarChar(500)
  duration        Int       // seconds
  privacy         String    @db.VarChar(20) // 'public', 'unlisted', 'private'
  isAdult         Boolean   @default(false) @map("is_adult")
  viewCount       Int       @default(0) @map("view_count")
  likeCount       Int       @default(0) @map("like_count")
  commentCount    Int       @default(0) @map("comment_count")
  status          String    @db.VarChar(20) // 'processing', 'ready', 'failed'
  s3Key           String?   @map("s3_key") @db.VarChar(500)
  hlsUrl          String?   @map("hls_url") @db.VarChar(500)
  publishedAt     DateTime? @map("published_at") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       VideoCategory?  @relation(fields: [categoryId], references: [id])
  tags           VideoTag[]
  likes          VideoLike[]
  comments       VideoComment[]
  views          VideoView[]
  watchHistory   WatchHistory[]
  playlistVideos PlaylistVideo[]

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([privacy])
  @@index([isAdult])
  @@index([publishedAt])
  @@index([createdAt])
  @@map("videos")
}

model VideoTag {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @map("video_id") @db.Uuid
  tag       String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, tag])
  @@index([tag])
  @@map("video_tags")
}

model VideoLike {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @map("video_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([videoId, userId])
  @@index([videoId])
  @@index([userId])
  @@map("video_likes")
}

model VideoComment {
  id         String    @id @default(uuid()) @db.Uuid
  videoId    String    @map("video_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  parentId   String?   @map("parent_id") @db.Uuid
  content    String    @db.Text
  likeCount  Int       @default(0) @map("like_count")
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  video   Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  VideoComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies VideoComment[] @relation("CommentReplies")

  @@index([videoId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@map("video_comments")
}

model VideoView {
  id         String   @id @default(uuid()) @db.Uuid
  videoId    String   @map("video_id") @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  duration   Int      // seconds watched
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  video Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([videoId])
  @@index([userId])
  @@index([createdAt])
  @@map("video_views")
}

model WatchHistory {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  videoId         String   @map("video_id") @db.Uuid
  progressSeconds Int      @default(0) @map("progress_seconds") // Current playback position
  durationSeconds Int?     @map("duration_seconds") // Total video duration
  lastWatchedAt   DateTime @default(now()) @map("last_watched_at") @db.Timestamptz
  completed       Boolean  @default(false) // Watched to the end
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
  @@index([lastWatchedAt])
  @@map("watch_history")
}

// ==================
// Monetization Models
// ==================

model Tip {
  id              String   @id @default(uuid()) @db.Uuid
  fromUserId      String   @map("from_user_id") @db.Uuid
  toUserId        String   @map("to_user_id") @db.Uuid
  contentType     String   @map("content_type") @db.VarChar(20) // 'video', 'short', 'live'
  contentId       String   @map("content_id") @db.Uuid
  amount          Int      // Amount in JPY
  message         String?  @db.Text
  paymentProvider String   @map("payment_provider") @db.VarChar(20) // 'stripe', 'ccbill'
  transactionId   String?  @map("transaction_id") @db.VarChar(255)
  status          String   @db.VarChar(20) // 'pending', 'completed', 'failed', 'refunded'
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  fromUser User @relation("SentTips", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedTips", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
  @@index([contentType, contentId])
  @@index([createdAt(sort: Desc)])
  @@map("tips")
}

model Earning {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  sourceType      String    @map("source_type") @db.VarChar(20) // 'tip', 'superchat', 'subscription_pool'
  sourceId        String?   @map("source_id") @db.VarChar(100)
  amount          Int       // Amount in JPY
  platformFee     Int       @map("platform_fee") // Platform fee (30%)
  netAmount       Int       @map("net_amount") // After fee deduction
  paymentProvider String?   @map("payment_provider") @db.VarChar(20) // 'stripe', 'ccbill'
  transactionId   String?   @map("transaction_id") @db.VarChar(255)
  status          String    @db.VarChar(20) // 'pending', 'available', 'withdrawn'
  availableAt     DateTime? @map("available_at") @db.Timestamptz // Available after 14 days
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sourceType])
  @@index([status])
  @@index([availableAt])
  @@map("earnings")
}

model WithdrawalMethod {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  type          String   @db.VarChar(50) // 'bank_transfer', 'paypal', 'other'

  // Bank transfer
  bankName      String?  @map("bank_name") @db.VarChar(100)
  branchName    String?  @map("branch_name") @db.VarChar(100)
  accountType   String?  @map("account_type") @db.VarChar(20) // 'checking', 'savings'
  accountNumber String?  @map("account_number") @db.VarChar(20) // Encrypted
  accountHolder String?  @map("account_holder") @db.VarChar(100)

  // PayPal
  paypalEmail   String?  @map("paypal_email") @db.VarChar(255)

  // Other
  metadata      Json?    @db.JsonB

  isVerified    Boolean  @default(false) @map("is_verified")
  isDefault     Boolean  @default(false) @map("is_default")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalRequests WithdrawalRequest[]

  @@index([userId])
  @@map("withdrawal_methods")
}

model WithdrawalRequest {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  withdrawalMethodId String    @map("withdrawal_method_id") @db.Uuid
  amount             Int       // Amount in JPY
  fee                Int       // Withdrawal fee
  netAmount          Int       @map("net_amount") // Actual transfer amount
  status             String    @db.VarChar(20) // 'pending', 'processing', 'completed', 'failed'
  requestedAt        DateTime  @default(now()) @map("requested_at") @db.Timestamptz
  processedAt        DateTime? @map("processed_at") @db.Timestamptz
  errorMessage       String?   @map("error_message") @db.Text

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalMethod WithdrawalMethod @relation(fields: [withdrawalMethodId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([requestedAt(sort: Desc)])
  @@map("withdrawal_requests")
}

model TaxInfo {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @unique @map("user_id") @db.Uuid
  entityType       String    @map("entity_type") @db.VarChar(20) // 'individual', 'business'
  individualNumber String?   @map("individual_number") @db.VarChar(255) // MyNumber (encrypted)
  businessNumber   String?   @map("business_number") @db.VarChar(255) // Corporate number (encrypted)
  name             String    @db.VarChar(100)
  address          String    @db.Text
  isVerified       Boolean   @default(false) @map("is_verified")
  verifiedAt       DateTime? @map("verified_at") @db.Timestamptz
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("tax_info")
}

// ==================
// Playlist Models
// ==================

model Playlist {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  name         String   @db.VarChar(100)
  description  String?  @db.Text
  isPublic     Boolean  @default(true) @map("is_public")
  videoCount   Int      @default(0) @map("video_count")
  thumbnailUrl String?  @map("thumbnail_url") @db.VarChar(500)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistVideos PlaylistVideo[]

  @@index([userId])
  @@index([isPublic])
  @@index([createdAt(sort: Desc)])
  @@map("playlists")
}

model PlaylistVideo {
  id         String   @id @default(uuid()) @db.Uuid
  playlistId String   @map("playlist_id") @db.Uuid
  videoId    String   @map("video_id") @db.Uuid
  position   Int      // Sort order (0-indexed)
  addedAt    DateTime @default(now()) @map("added_at") @db.Timestamptz

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
  @@index([playlistId])
  @@index([videoId])
  @@index([playlistId, position])
  @@map("playlist_videos")
}

// =====================================
// 7. Social Features
// =====================================

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt(sort: Desc)])
  @@map("follows")
}

model Notification {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  type         String    @db.VarChar(50) // 'new_video', 'comment_reply', 'like', 'tip_received', 'new_follower', 'live_started'
  title        String    @db.VarChar(200)
  message      String    @db.Text
  thumbnailUrl String?   @map("thumbnail_url") @db.VarChar(500)
  linkUrl      String?   @map("link_url") @db.VarChar(500)
  actorId      String?   @map("actor_id") @db.Uuid
  contentType  String?   @map("content_type") @db.VarChar(20) // 'video', 'short', 'live', 'comment'
  contentId    String?   @map("content_id") @db.VarChar(100)
  isRead       Boolean   @default(false) @map("is_read")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt(sort: Desc)])
  @@map("notifications")
}

model UserStats {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @unique @map("user_id") @db.Uuid
  followerCount  Int      @default(0) @map("follower_count")
  followingCount Int      @default(0) @map("following_count")
  totalViews     BigInt   @default(0) @map("total_views")
  totalLikes     BigInt   @default(0) @map("total_likes")
  totalVideos    Int      @default(0) @map("total_videos")
  totalShorts    Int      @default(0) @map("total_shorts")
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([followerCount(sort: Desc)])
  @@map("user_stats")
}

// =====================================
// 8. Channel Management
// =====================================

model Channel {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @unique @map("user_id") @db.Uuid
  name            String   @db.VarChar(100)
  description     String?  @db.Text
  avatarUrl       String?  @map("avatar_url") @db.VarChar(500)
  bannerUrl       String?  @map("banner_url") @db.VarChar(500)
  subscriberCount Int      @default(0) @map("subscriber_count")
  totalViews      BigInt   @default(0) @map("total_views")
  totalVideos     Int      @default(0) @map("total_videos")
  totalShorts     Int      @default(0) @map("total_shorts")
  isVerified      Boolean  @default(false) @map("is_verified")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  links ChannelLink[]

  @@index([userId])
  @@index([subscriberCount(sort: Desc)])
  @@map("channels")
}

model ChannelLink {
  id        String   @id @default(uuid()) @db.Uuid
  channelId String   @map("channel_id") @db.Uuid
  platform  String   @db.VarChar(50) // 'twitter', 'instagram', 'youtube', 'website', 'facebook', 'tiktok'
  url       String   @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@map("channel_links")
}
